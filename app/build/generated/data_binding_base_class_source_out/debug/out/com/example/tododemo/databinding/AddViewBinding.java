// Generated by view binder compiler. Do not edit!
package com.example.tododemo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.tododemo.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AddViewBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout mylayout;

  @NonNull
  public final TextView taskName;

  @NonNull
  public final TextView taskPriority;

  @NonNull
  public final TextView tvClock;

  @NonNull
  public final TextView tvSchedule;

  @NonNull
  public final TextView tvTime;

  private AddViewBinding(@NonNull ConstraintLayout rootView, @NonNull LinearLayout mylayout,
      @NonNull TextView taskName, @NonNull TextView taskPriority, @NonNull TextView tvClock,
      @NonNull TextView tvSchedule, @NonNull TextView tvTime) {
    this.rootView = rootView;
    this.mylayout = mylayout;
    this.taskName = taskName;
    this.taskPriority = taskPriority;
    this.tvClock = tvClock;
    this.tvSchedule = tvSchedule;
    this.tvTime = tvTime;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AddViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AddViewBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.add_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AddViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.mylayout;
      LinearLayout mylayout = ViewBindings.findChildViewById(rootView, id);
      if (mylayout == null) {
        break missingId;
      }

      id = R.id.task_name;
      TextView taskName = ViewBindings.findChildViewById(rootView, id);
      if (taskName == null) {
        break missingId;
      }

      id = R.id.task_priority;
      TextView taskPriority = ViewBindings.findChildViewById(rootView, id);
      if (taskPriority == null) {
        break missingId;
      }

      id = R.id.tv_clock;
      TextView tvClock = ViewBindings.findChildViewById(rootView, id);
      if (tvClock == null) {
        break missingId;
      }

      id = R.id.tv_Schedule;
      TextView tvSchedule = ViewBindings.findChildViewById(rootView, id);
      if (tvSchedule == null) {
        break missingId;
      }

      id = R.id.tv_Time;
      TextView tvTime = ViewBindings.findChildViewById(rootView, id);
      if (tvTime == null) {
        break missingId;
      }

      return new AddViewBinding((ConstraintLayout) rootView, mylayout, taskName, taskPriority,
          tvClock, tvSchedule, tvTime);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
